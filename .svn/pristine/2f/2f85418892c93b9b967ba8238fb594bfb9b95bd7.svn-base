/*
 * <pre> 
 * Class: <b>BoardPanel</b> 
 * File: BoardPanel.java 
 * Course: TCSS 305 – Autumn 2015
 * Assignment 6 – Tetris
 * Copyright 2015 Moe Abdipour
 * </pre>
 */

package board;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;
import javax.swing.Timer;

import model.AbstractPiece;
import model.Block;
import model.Board;
import model.Piece;
import view.TetrisGUI;
/**
 * <pre>
 * This class is the a panel that displays the board of blocks. The board will
 * be updated on a predefined time interval and each update displays a progress
 * in the game.
 * </pre>
 * 
 * @author Moe Abdipour
 * @version 12/2/2015
 * @since November 22, 2015
 */

public class BoardPanel extends JPanel implements Observer {

	/**
	 * The auto-generated serial ID.
	 */
	private static final long serialVersionUID = 309099333020990856L;

	/**
	 * A map that saves the user's key control preferences. The default values
	 * are set in this class.
	 */
	private static final Map<String, Integer> CONTROL_KEY_MAP = new HashMap<String, Integer>();

	/**
	 * The initial timer delay and the time interval between each timer tick.
	 */
	private static final int TIMER_INTERVAL = 1000;

	/**
	 * The panel's background color.
	 */
	private static final Color PANEL_COLOR = Color.gray;

	/**
	 * The grid's color.
	 */
	private static final Color GRID_COLOR = new Color(0, 0, 0, 15);

	/**
	 * The rounding of block corners.
	 */
	private static final int BLOCK_ROUNDING = 5;

	/**
	 * The ratio of scale to width.
	 */
	private static final int WIDTH_RATIO = 24;

	/**
	 * The ratio of scale to height.
	 */
	private static final int HEIGHT_RATIO = 26;

	/**
	 * The game board.
	 */
	private final Board myBoard;
	
	/**
	 * The timer controlling the speed of the game.
	 */
	private final Timer myMainTimer;

	/**
	 * The width of game board.
	 */
	private final int myBoardWidth;

	/**
	 * The height of the game board.
	 */
	private final int myBoardHeight;

	/**
	 * The key listener for the game.
	 */
	private ControlKeyMapSetter myControlKeyListener;

	/**
	 * The scale to which panel contents should be drawn.
	 */
	private int myScale;

	/**
	 * The initial scale to which panel should be drawn.
	 */
	private static final int INITIAL_SCALE = 20;

	/**
	 * The boolean that shows whether the grid option is enabled or not. True
	 * means enabled and vice versa.
	 */
	private boolean myGridEnabled;

	/**
	 * Constructor for game board.
	 * 
	 * @param the_width the width of the game board
	 * @param the_height the height of the game board
	 */
	public BoardPanel(final int the_width, final int the_height) {
		myBoardWidth = the_width;
		myBoardHeight = the_height;
		myBoard = new Board(myBoardWidth, myBoardHeight, new LinkedList<Piece>());
		myBoard.addObserver(this);
		myMainTimer = new Timer(TIMER_INTERVAL, new TickListener());
		setFocusable(true);
		myControlKeyListener = new ControlKeyMapSetter();
		addKeyListener(myControlKeyListener);
		myGridEnabled = false;

		myScale = INITIAL_SCALE;
	}

	/**
	 * Starts a new game.
	 */
	public void start() {
		myMainTimer.start();
	}

	/**
	 * Starts a new game and eliminates the old game.
	 */
	public void newGame() {
		myBoard.newGame(myBoardWidth, myBoardHeight, new LinkedList<Piece>());
		myMainTimer.setDelay(TIMER_INTERVAL);
		removeKeyListener(myControlKeyListener);
		addKeyListener(myControlKeyListener);
		start();
	}

	/**
	 * Resets the key controls to their default value.
	 */
	public void resetControls() {
		myControlKeyListener = new ControlKeyMapSetter();
	}

	/**
	 * Method to enable or disable the grid.
	 * 
	 * @param theEnabled True means the grid option is enabled and vice versa
	 */
	public void enableGrid(final boolean theEnabled) {
		myGridEnabled = theEnabled;
	}

	/**
	 * Method to add observer to he board.
	 * 
	 * @param theObserver the observer to add to the board
	 */
	public void addBoardObserver(final Observer theObserver) {
		myBoard.addObserver(theObserver);
	}

	/**
	 * Returns the set of control keys.
	 * 
	 * @return map of control keys
	 */
	public Map<String, Integer> getControlKeys() {
		return myControlKeyListener.getKeyMap();
	}

	/**
	 * Paints the game board.
	 * 
	 * @param theGraphic the graphic object to be drawn
	 */
	@Override
	public void paintComponent(final Graphics theGraphic) {
		super.paintComponent(theGraphic);
		final Graphics2D g2d = (Graphics2D) theGraphic;
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g2d.setColor(PANEL_COLOR);
		g2d.fillRect(0, 0, myBoardWidth * myScale + 1, (myBoardHeight + 1) * myScale + 1);
		drawPanel(g2d);
	}

	/**
	 * Draws blocks on the board panel.
	 * 
	 * @param theGraphic the graphics2D object to be drawn on
	 */
	private void drawPanel(final Graphics2D theGraphic) {
		// draws frozen blocks
		int row = 0;
		for (Block[] localBlock : myBoard.getFrozenBlocks()) {
			
			int column = 0;
			for (Block block : localBlock) {
				if (block != Block.EMPTY) {
					theGraphic.setColor(Color.white);
				} else {
					theGraphic.setColor(Color.gray);
				}
				theGraphic.fillRoundRect(column * myScale, (myBoardHeight - row) * myScale, myScale, myScale,
						BLOCK_ROUNDING, BLOCK_ROUNDING);
				theGraphic.setColor(Color.gray);
				theGraphic.drawRoundRect(column * myScale, (myBoardHeight - row) * myScale, myScale, myScale,
						BLOCK_ROUNDING, BLOCK_ROUNDING);
				column++;
			}
			row++;
		}

		// draws current block
		final Piece localPiece = myBoard.getCurrentPiece();
		final int[][] pieceCoordinates = ((AbstractPiece) localPiece).getBoardCoordinates();

		final Color currentColor = (Color.red);

		for (int[] block : pieceCoordinates) {
			theGraphic.setColor(currentColor);
			theGraphic.fillRoundRect(block[0] * myScale, (myBoardHeight - block[1]) * myScale, myScale, myScale,
					BLOCK_ROUNDING, BLOCK_ROUNDING);
			theGraphic.setColor(Color.gray);
			theGraphic.drawRoundRect(block[0] * myScale, (myBoardHeight - block[1]) * myScale, myScale, myScale,
					BLOCK_ROUNDING, BLOCK_ROUNDING);
		}

		theGraphic.setFont(new Font("Level Font", Font.BOLD, myScale));
		theGraphic.setColor(Color.WHITE);

		// draws grid if it is enabled
		if (myGridEnabled) {
			theGraphic.setColor(GRID_COLOR);
			for (int i = 1; i < myBoardWidth; i++) {
				theGraphic.drawLine(myScale * i, 0, myScale * i, myBoardHeight * myScale + myScale);
			}
			for (int i = 1; i <= myBoardHeight; i++) {
				theGraphic.drawLine(0, myScale * i, myBoardWidth * myScale, myScale * i);
			}
		}
	}

	/**
	 * Updates the board.
	 * 
	 * @param theObserver the in-action observable (GUI)
	 * @param theObject the object passed in by observable object
	 */
	@Override
	public void update(final Observable theObserver, final Object theObject) {
		if (theObserver instanceof TetrisGUI) {
			final Dimension currentSize = ((ComponentEvent) theObject).getComponent().getSize();
			final double width = currentSize.getWidth();
			final double height = currentSize.getHeight();
			if (width < height) {
				myScale = (int) width / WIDTH_RATIO;
			} else {
				myScale = (int) height / HEIGHT_RATIO;
			}
		}

		repaint();
	}
	
	public int getFrozenBlockSize() {
		return myBoard.getFrozenBlocks().size();
	}

	/**
	 * <pre>
	 * This class makes defines the actions need to be done on each timer's tick.
	 * </pre>
	 * 
	 * @author Moe Abdipour
	 * @version 12/2/2015
	 * @since November 22, 2015
	 */
	private class TickListener implements ActionListener {

		/**
		 * Makes the actions to be done on each timer's tick.
		 * 
		 * @param theEvent the timer firing event
		 */
		@Override
		public void actionPerformed(final ActionEvent theEvent) {
			if (!myBoard.isGameOver()) {
				myBoard.step();
			} else {
				myMainTimer.stop();
				for (KeyListener localLitstener : getKeyListeners()) {
					removeKeyListener(localLitstener);
				}
			}
		}
	}

	/**
	 * <pre>
	 * This class sets the key controllers of the game.
	 * </pre>
	 * 
	 * @author Moe Abdipour
	 * @version 12/2/2015
	 * @since November 22, 2015
	 */
	private class ControlKeyMapSetter extends KeyAdapter {

		/**
		 * String representing move left action.
		 */
		private static final String LEFT = "left";

		/**
		 * String representing move right action.
		 */
		private static final String RIGHT = "right";

		/**
		 * String representing move down action.
		 */
		private static final String DOWN = "down";

		/**
		 * String representing drop action.
		 */
		private static final String DROP = "drop";

		/**
		 * String representing rotate action.
		 */
		private static final String ROTATE = "rotate";

		/**
		 * Array of action names.
		 */
		private final String[] myControls = { LEFT, RIGHT, DOWN, DROP, ROTATE };

		/**
		 * Array of key codes for each of actions.
		 */
		private final int[] myControlKeys = { KeyEvent.VK_LEFT, KeyEvent.VK_RIGHT, KeyEvent.VK_DOWN, KeyEvent.VK_SPACE,
				KeyEvent.VK_UP };

		/**
		 * Constructor that sets up control key map.
		 */
		public ControlKeyMapSetter() {
			for (int i = 0; i < myControls.length; i++) {
				CONTROL_KEY_MAP.put(myControls[i], myControlKeys[i]);
			}
		}

		/**
		 * Returns the control key map.
		 * 
		 * @return key control map <name, keycode>
		 */
		public Map<String, Integer> getKeyMap() {
			return CONTROL_KEY_MAP;
		}

		/**
		 * Defines the actions to the control keys.
		 * 
		 * @param theEvent the keyPressed event passed in
		 */
		@Override
		public void keyPressed(final KeyEvent theEvent) {
			if (theEvent.getKeyCode() == CONTROL_KEY_MAP.get(LEFT)) {
				myBoard.moveLeft();
			} else if (theEvent.getKeyCode() == CONTROL_KEY_MAP.get(RIGHT)) {
				myBoard.moveRight();
			} else if (theEvent.getKeyCode() == CONTROL_KEY_MAP.get(DOWN)) {
				myBoard.moveDown();
			} else if (theEvent.getKeyCode() == CONTROL_KEY_MAP.get(DROP)) {
				myBoard.drop();
			} else if (theEvent.getKeyCode() == CONTROL_KEY_MAP.get(ROTATE)) {
				myBoard.rotate();
			}
		}
	}
}